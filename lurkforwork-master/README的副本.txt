


# 评估 3 - Vanilla JS：LurkForWork

一、背景与动机
2.任务
3. 开始
4. 约束和假设
五、评分标准
六、作品原创性
7.提交
8. 延迟提交政策

## 0.更改日志

不适用

## 1. 背景和动机

基于 Web 的应用程序正在成为构建大众可访问的数字功能的最常见方式。 虽然有现代工具可以帮助我们快速构建这些，但了解现有的基于 JavaScript 的基本技术和架构非常重要，这既可以更深入地了解何时可能需要这些技能，也可以简单地了解基本的机制 JS。 即使在使用像 ReactJS 这样的高级框架时，理解（在概念上）它被转换成的代码也会确保你是一个更全面的基于 Web 的工程师。

此作业包括使用 Vanilla JS（无 ReactJS 或其他框架）构建一个**前端**网站。 该前端将与以 JavaScript（NodeJS Express 服务器）构建并提供给您的 RESTful API HTTP 后端进行交互。

有关如何与此 API 交互的理论背景可以在“promises & fetch”讲座中找到。

您构建的基于 Web 的应用程序必须是单页应用程序 (SPA)。 单页应用程序给网站一种“类似应用程序的感觉”，其特点是使用一次完整加载初始 HTML 页面，然后使用 AJAX/fetch 动态操作 DOM，而无需重新加载整个页面。 通过这种方式，使用 JavaScript 生成、呈现和更新 SPA。 因为 SPA 不需要用户离开页面来做任何事情，所以它们保留了一定程度的用户和应用程序状态。 简而言之，这意味着您将永远只有 `index.html` 作为您的 HTML 页面，并且任何“在页面之间移动”的感觉都只是对 DOM 的修改。

## 2. 任务（前端）

您的任务是为流行的专业社交网络工具 [LinkedIn](https://linkedin.com/) 的 UNSW 盗版构建前端。 如果您以前没有使用过此应用程序，我们建议您创建自己的 LinkedIn 个人资料 - 这可能对您的职业生涯有好处！

UNSW 对 LinkedIn 的盗版被称为“LurkForWork”。 但是，您不必构建整个应用程序。 您只需要构建前端。 后端已经作为一个用 NodeJS 构建的快速服务器为您构建（请参阅第 3.2 节）。

我们不是提供前端（您的任务）应该是什么样子的视觉效果，而是为您提供一些关于预期功能和行为的清晰而简短的要求。

这些要求描述了一系列**屏幕**。 屏幕可以是弹出窗口/模式，或整个页面。 使用该语言是为了让您可以选择如何显示它。 屏幕本质上是基于 Web 的应用程序的特定状态。

### 2.1。 里程碑 1 - 注册和登录 (9.4%)

这侧重于注册和登录站点的基本用户界面。

#### 2.1.1。 登录
  * 当用户未登录时，网站应显示包含以下内容的登录表单：
    * 电子邮件字段（文本）
    * 密码字段（密码）
    * 提交按钮登录
  * 按下提交按钮时，应将表单数据发送到 POST /auth/login 以验证凭据。 如果在登录期间出现错误，屏幕上应显示相应的错误。

#### 2.1.2。 登记
  * 当用户未登录时，登录表单应提供打开注册表单的链接/按钮。 注册表将包含：
    * 电子邮件字段（文本）
    * 名称字段（文本）
    * 密码字段（密码）
    * 确认密码字段（密码）- 不传递到后端，但如果与其他密码不匹配，则应在提交时抛出错误
    *提交按钮注册
  * 当按下提交按钮时，如果两个密码不匹配，用户应该会收到一个错误弹出窗口。 如果它们匹配，则应将表单数据发送到 POST /auth/register 以验证凭据。 如果在注册过程中出现错误，屏幕上应显示相应的错误。

#### 2.1.3。 错误弹窗
  * 每当前端或后端产生错误时，屏幕上都会弹出一个错误消息（从后端错误响应派生的消息，或者在前端有意义地创建的消息）。
  * 可以通过按“x”或“关闭”按钮关闭/移除/删除此弹出窗口。

### 2.2。 里程碑 2 - 基本 Feed (14%)

里程碑 2 侧重于从 API 获取提要数据。 提要及其相关内容应该仅供登录用户访问。

#### 2.2.1。 基本饲料

应用程序应在派生的“GET /job/feed”主页上呈现用户内容的“提要”。 请注意，提要只会返回登录用户正在观看的人的信息。

作业应按时间倒序显示（最近的作业在前）。
每个作业应显示：
1.职位发布者是谁
2.发布时间
   * 如果职位是今天发布的（过去 24 小时内），它应该显示发布的小时数和分钟数
   * 如果职位发布时间超过 24 小时，它应该只显示发布日期 DD/MM/YYYY
3.工作内容本身。 工作内容包括以下内容：
   * 描述工作的图像（base64 格式的 jpg）
   * 新工作的标题（只是一个字符串）
   * 工作的开始日期（只是一个字符串）
   * 它有多少喜欢（或没有）
   * 职位描述文本
   * 职位发布有多少条评论

### 2.3。 里程碑 3 - 高级 Feed (9.4%)
 
里程碑 3 侧重于更丰富的用户体验，并且需要一些后端交互。

#### 2.3.1。 对工作表示喜欢
* 允许用户查看喜欢某个工作的所有用户的列表。 就其显示方式而言，请从以下 3 个选项中考虑您首选的用户体验方法：
   * 默认情况下，名称列表在提要中的每个职位上都是可见的
   * 如果单击显示/隐藏切换（默认情况下隐藏），则姓名列表在提要中的职位上可见。
   * 当在提要上单击按钮/链接时，名称列表在弹出窗口、模态屏幕或新屏幕中可见。

#### 2.3.2。 显示对工作的评论
* 允许用户查看作业中所有评论的列表。 每条评论至少应包含用户的姓名及其评论。 就其显示方式而言，请从以下 3 个选项中考虑您首选的用户体验方法：
   * 默认情况下，名称和评论列表在提要中的每个职位上都可见
   * 如果单击显示/隐藏切换（默认情况下隐藏），则姓名和评论列表在提要中的职位上可见。
   * 当在提要上单击按钮/链接时，名称和评论列表在弹出窗口、模式或新屏幕中可见。

#### 2.3.3。 喜欢一份工作
* 用户可以在他们的 feed 上点赞一份工作并触发 api 请求（`PUT /job/like`）
* 对于这个里程碑，如果在页面刷新之前没有出现/更新点赞是可以的。

#### 2.3.4。 提要分页
* 用户可以使用带有 (`GET /job/feed`) 的位置标记在提要中的结果集之间进行分页。
* 注意：如果您最终在以后的里程碑中实施了无限滚动替代方案，您将自动获得此部分的分数。

### 2.4。 里程碑 4 - 其他用户和个人资料 (14%)

里程碑 4 主要关注用户配置文件以及用户如何与他们交互。

#### 2.4.1。 查看其他人的个人资料
* 让用户在工作、赞或评论中单击用户名，然后转到该用户的个人资料屏幕。
* 配置文件屏幕应包含后端通过 (`GET /user`) 为该特定用户 ID 提供的任何信息。
* 个人资料还应显示该人所做的所有工作。 您无需在此处为每项工作显示喜欢和/或评论。
* 该配置文件还应在某处显示该配置文件被观看的所有其他用户（通过 `GET /user` 获取信息）。 这应该包括一个名称列表（每个名称链接到另一个配置文件），以及页面某处的计数，显示他们被观看的用户总数。

#### 2.4.2。 查看您自己的个人资料
* 用户可以像查看其他用户的个人资料一样查看自己的个人资料
* 登录后，用户个人资料的链接（通过文本或小图标）应该在大多数屏幕上（至少在提要屏幕上）常见的地方可见。

#### 2.4.3。 更新您的个人资料
* 用户可以通过 (`PUT /user`) 更新自己的个人资料。 这允许他们更新他们的：
   * 电子邮件地址
   * 密码
   * 姓名
   * 图像

#### 2.4.4。 看/不看
* 观看用户资料：
   * 当登录用户访问另一个用户的个人资料页面时，应该存在一个按钮，允许他们“观看”其他用户（通过“PUT user/watch”）。
   * 如果登录用户已经观看了此人，则应该存在取消观看按钮。
* 提要屏幕上的某处还应该存在一个按钮，提示输入者在弹出窗口中输入电子邮件地址。 输入后，电子邮件地址将发送到“PUT /user/watch”以监视该特定用户。

### 2.5。 里程碑 5 - 添加和更新内容 (9.3%)

里程碑 5 侧重于添加和删除内容和评论。

#### 2.5.1。 添加工作
* 用户可以通过 (`POST /job`) 从模式、组件或单独的屏幕上传和工作新内容
* 用户如何打开这个组件、模式或单独的屏幕可以在一个或多个地方找到，并且应该容易和清晰地访问。

#### 2.5.2。 更新和删除作业
* 让用户更新他们所做的工作或通过 (`DELETE /job`) 或 (`PUT /job`) 删除它。

#### 2.5.3。 留下评论
* 用户可以通过 (`POST /job/comment`) 对“工作”发表评论

### 2.6。 里程碑 6 - 挑战组件（`高级`）（9.3%）

#### 2.6.1。 无限滚动
* 用户可以无限滚动浏览结果，而不是分页。 为了正确实现无限滚动，您需要在滚动时逐步加载作业。

#### 2.6.2。 实时更新
* 如果用户喜欢某项工作或对某项工作发表评论，则该工作的喜欢和评论应该会更新，而无需重新加载/刷新页面。 这应该通过某种轮询来完成。

*轮询对于浏览器来说效率很低，但通常可以使用，因为它简化了服务器上的技术需求。*

#### 2.6.3。 推送通知
* 当他们关注的用户发布职位时，用户可以收到推送通知。 要知道是否有人发布了职位，您必须“轮询”服务器（即间歇性请求，可能每秒检查一次状态）。 您可以通过浏览器内置的通知 API 或您自己定制的通知/弹出窗口来实现这一点。 通知不需要存在于网页之外。

_不会为该组件提供讲座中的课程帮助，您应该自行研究如何实施。 网上资源丰富。_

### 2.7。 里程碑 7 - 非常具有挑战性的组件（`advanced *= 2`）（4.6%）

#### 2.7.1。 静态提要离线访问
* 即使没有互联网连接，用户也可以访问他们加载的最新提要。
* 缓存来自本地存储中最新提要的信息以备不时之需。
* 当用户尝试在离线模式下与网站交互时（例如评论，喜欢）他们应该收到错误

_不会为该组件提供任何课程帮助，您应该自行研究如何实施。_

#### 2.7.2 基于分片的URL路由
用户可以使用 URL 片段访问不同的页面：
```
/#配置文件=1
/＃喂养
/#配置文件=4
```

_不会为该组件提供讲座或论坛的课程帮助，您应该自行研究如何实施。_

#### 2.8。 加分 (5%)

可以通过加分获得额外 5% 的作业，这意味着最高分数为 105/100。 任何将你的 ass2 分数提高到 100% 以上的奖励分数都会渗透到其他作业分数中，但不能在分配给作业分数的 75% 课程之外做出贡献

您的奖励功能可以是任何东西。 您只需要考虑一些可以使您的 Web 应用程序以某种次要或主要方式脱颖而出的东西。 简单的例子包括确保您的用户界面和用户体验在其他学生中脱颖而出，也许通过一些用户测试。

您还可以添加额外的功能，例如一些额外的前端表单验证 - 可能性是无限的。

如果您确实实现了奖励功能，请在此存储库根目录中的“bonus.md”中描述该功能及其详细信息。

## 3. 开始

### 3.1。 前端

已提供存根代码以帮助您开始：
  *`前端/index.html`
  *`前端/样式/global.css`
  *`前端/src/helpers.js`
  *`前端/src/main.js`

如果您愿意，可以修改或删除此存根代码。 它只是在这里可能提供一些帮助。

要在 Web 服务器本地使用前端代码，您可能必须运行另一个 Web 服务器来为前端的静态文件提供服务。

为此，请在您的计算机上运行一次以下命令：

`$ npm install --global http-server`

然后每当你想启动你的服务器时，在你的项目的根文件夹中运行以下命令：

`$ npx http-server frontend -c 1 -p [端口]`

其中 `[port]` 是您要在其上运行服务器的端口（例如 `8080`）。 任何数字都可以。

这将启动第二个 HTTP 服务器，如果您导航到“http://localhost:8000”（或它提供的任何 URL/端口），它将运行您的“index.html”而不会出现任何 COR 问题。

### 3.2。 后端

您被禁止修改后端。 无需在后端完成任何工作。 它提供给您只是为了为您的前端提供动力。

后端服务器存在于您的个人存储库中。 克隆此 repo 后，必须在 backend 目录中运行 yarn install 一次。

要运行后端服务器，只需在 backend 目录中运行 yarn start 即可。 这将启动后端。

要查看后端的 API 接口，您可以导航到后端的基本 URL（例如“http://localhost:5005”）。 这将列出您可以与之交互的所有 HTTP 路由。

我们为您提供了一个非常基本的起始数据库，其中包含两个用户和一个带有消息的公共频道。 您可以查看 `backend/database.json` 来查看内容。

您的后端在数据存储方面是持久的。 这意味着即使您的快速服务器进程停止运行，数据仍将保留。 如果你想把后台的数据重置为原来的启动状态，可以在后台目录下运行`yarn reset`。 如果您想复制后端数据（例如用于备份），那么只需复制 `database.json`。 如果你想从一个空数据库开始，你可以在后端目录中运行 `yarn clear`。

后端启动后，您可以通过在 Web 浏览器中导航到“http://localhost:[port]”来查看 API 文档。

后端运行的端口（以及前端可以使用的端口）在 frontend/src/config.js 中指定。 您可以更改此文件中的端口。 这个文件的存在是为了让你的前端知道在与后端对话时使用哪个端口。

请注意：如果您手动更新 database.json，您将需要重新启动服务器。

请注意：您不能修改奖励标记的后端源代码。

### 3.3。 迈出第一步

这是我们建议您开始作业的方式：
  1. 阅读整个规范，包括通读第 2 部分，以便您了解接下来的内容！
  2. 尝试使用简单的“Hello world”文本在您的浏览器上加载 `index.html`，以检查是否清楚您要加载的页面。
  3. 通过考虑所有关键屏幕及其依赖的信息来规划您的 UI
  4. 尝试加载后端并通过对 `/feed` 进行简单的 API 调用来验证它是否正常工作（这应该会返回一个空列表）
  5.祝你好运！

## 4.约束和假设

### 4.1。 Javascript

  * 您必须在符合 ES6 标准的 Vanilla JavaScript 中实现此分配。 您不能使用 ReactJS、JQuery 或其他抽象框架。 例如，您不能使用流行的 Javascript 框架，例如 <a href="https://angular.io/">Angular</a> 或 <a href="https://reactjs.org/"> 反应</a>。
  * 您可以**不**直接使用外部 JavaScript。 除非事先获得课程权威的批准，否则不要使用 NPM，除非安装任何其他开发库。

### 4.2。 CSS 和其他库

  * 您可以使用从 Stack Overflow 或其他公开可用资源等站点获得的少量（<10 行）通用代码（不特定于作业）。 您应该在注释中明确注明此代码的来源。 您不能以其他方式使用他人编写的代码。
  * 您可以在此作业中包含外部 CSS 库（使用 `<link />` 标签）。 您必须注明这些来源（即在源代码注释中提供 URL/作者）。 例如，您可以使用流行的 <a href="https://getbootstrap.com/">Bootstrap</a> CSS 框架。 一些 Bootstrap 功能依赖于随附的 Javascript。 您可以包含此 Javascript。 Bootstrap 附带的 Javascript 需要流行的通用 Javascrpt 库 <a href="https://jquery.com/">jQuery</a>。 您可以包含 <b>jQuery</b> 以便 bootstrap 可以使用它。 但是，您不得在为作业编写的代码中使用 <b>jQuery</b>。

### 4.3。 浏览器兼容性

您应该确保您的程序已经在以下两种浏览器之一上进行了测试：
  * 在本地，Google Chrome（各种操作系统）
  * 在 CSE 机器上，Chromium

### 4.4。 其他需求

  * 该规范故意含糊不清，以允许您构建您认为视觉上合适的前端组件。 它们的大小、位置、颜色、布局几乎在所有情况下都完全由您决定。 我们需要一些基本标准，但它主要是规定元素和行为。
  * 这不是设计任务。 在基本的用户体验和视觉布局方面，你需要表现出常识和批判性思维，但你不需要创造性才能获得满分。
  * 您的网络应用程序必须是单页应用程序。 这意味着在一个 html 页面上只有一次初始浏览器内容加载，并且页面的所有后续动态更改都基于 Javascript DOM 操作。 如果您不构建单页应用程序（例如，使用指向多个 HTML 页面的链接），您将收到 50% 的分数罚款。

### 4.5。 静态 HTML、innerHTML、DOM 操作

在这个任务中，你是：
  * 允许将静态 HTML/CSS 添加到提供的存根网站（即，您可以将原始 HTML/CSS 当作静态页面，即使您随后使用 JavaScript 对其进行操作）。
  * 允许构建 HTML 元素并通过 JavaScript 将 CSS 属性添加到 DOM。 我们希望这是学生构建这些页面的最常见方式。
  * 严格**不允许**使用节点/标签的“innerHTML”属性来设置元素的内部 HTML。 这存在安全漏洞，通常不是最佳实践。 要么静态添加 HTML/CSS 并使用 JavaScript 对其进行操作，要么在 JavaScript 中生成和构建节点/元素（就像在讲座/教程/实验室中一样），或两者兼而有之。 但不要设置内部 HTML。 使用任何 `innerHTML` 将导致您的分数被扣 50%。

### 4.6。 异步、等待、承诺

严格**不允许**在此作业中使用“async”和“await”语法。 您必须使用 ES6 Promises。 使用任何 `async` 或 `await` 都会导致你的分数被扣 50%。

## 5. 评分标准

您的作业将由课程中的导师根据以下标准手工标记。

请注意：当我们测试您的 UI 时，我们将使用预加载的数据库 JSON，其中已经添加了工作、用户和手表。
